[{"/Users/magdalenamotyl/covidsweeper/covidsweeper/src/index.tsx":"1","/Users/magdalenamotyl/covidsweeper/covidsweeper/src/reportWebVitals.ts":"2","/Users/magdalenamotyl/covidsweeper/covidsweeper/src/App.tsx":"3","/Users/magdalenamotyl/covidsweeper/covidsweeper/src/hooks/useCells.tsx":"4","/Users/magdalenamotyl/covidsweeper/covidsweeper/src/helpers/openCells.tsx":"5"},{"size":500,"mtime":1609855639685,"results":"6","hashOfConfig":"7"},{"size":425,"mtime":1609855639690,"results":"8","hashOfConfig":"7"},{"size":2054,"mtime":1609940696308,"results":"9","hashOfConfig":"7"},{"size":4614,"mtime":1609932054896,"results":"10","hashOfConfig":"7"},{"size":3575,"mtime":1609940900396,"results":"11","hashOfConfig":"7"},{"filePath":"12","messages":"13","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"14"},"1n07qtq",{"filePath":"15","messages":"16","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"14"},{"filePath":"17","messages":"18","errorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},{"filePath":"19","messages":"20","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"21","usedDeprecatedRules":"14"},{"filePath":"22","messages":"23","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},"/Users/magdalenamotyl/covidsweeper/covidsweeper/src/index.tsx",[],["24","25"],"/Users/magdalenamotyl/covidsweeper/covidsweeper/src/reportWebVitals.ts",[],"/Users/magdalenamotyl/covidsweeper/covidsweeper/src/App.tsx",["26","27"],"/Users/magdalenamotyl/covidsweeper/covidsweeper/src/hooks/useCells.tsx",["28"],"import { useState, useEffect } from 'react';\n\nexport enum StatusType {\n\tcover,\n\tuncover,\n\tflagged,\n}\n\nexport enum ValueType {\n\tzero = 0,\n\tone = 1,\n\ttwo = 2,\n\tthree,\n\tfour,\n\tfive,\n\tsix,\n\tseven,\n\teight,\n\tbomb,\n}\n\nexport type Cell = {\n\tstatus: StatusType;\n\tvalue: ValueType;\n};\n\nexport function useCells(rows: number, cols: number, bombs: number = 10) {\n\tconst cellsNo = rows * cols;\n\tconst [cells, setCells] = useState<Cell[]>([]);\n\tuseEffect(() => {\n\t\t// step 1: generate plain table\n\t\tlet _cells: Cell[] = Array(...Array(cellsNo)).map((_) => ({\n\t\t\tstatus: StatusType.cover,\n\t\t\tvalue: ValueType.zero,\n\t\t}));\n\n\t\t// step 2: put randomly N-bombs\n\n\t\tlet bombsPlaced = 0;\n\t\twhile (bombsPlaced < bombs) {\n\t\t\tlet bombCellNo = Math.floor(Math.random() * cellsNo);\n\n\t\t\tif (_cells[bombCellNo].value !== ValueType.bomb) {\n\t\t\t\t_cells[bombCellNo].value = ValueType.bomb;\n\t\t\t\tbombsPlaced++;\n\t\t\t} else {\n\t\t\t\tcontinue;\n\t\t\t}\n\t\t}\n\n\t\t// step 3: put numbers\n\n\t\tfor (let i = 0; i < cellsNo; i++) {\n\t\t\tlet numberOfBombs: number = 0;\n\t\t\tif (_cells[i].value !== ValueType.bomb) {\n\t\t\t\tif (i > 0 && i < cols - 1) {\n\t\t\t\t\t// first row w/o corners\n\t\t\t\t\tif (_cells[i - 1].value === ValueType.bomb) numberOfBombs++;\n\t\t\t\t\tif (_cells[i + 1].value === ValueType.bomb) numberOfBombs++;\n\t\t\t\t\tif (_cells[i + cols].value === ValueType.bomb) numberOfBombs++;\n\t\t\t\t\tif (_cells[i + cols - 1].value === ValueType.bomb) numberOfBombs++;\n\t\t\t\t\tif (_cells[i + cols + 1].value === ValueType.bomb) numberOfBombs++;\n\t\t\t\t} else if (i > cellsNo - cols && i < cellsNo - 1) {\n\t\t\t\t\t// last row w/o corners\n\t\t\t\t\tif (_cells[i - 1].value === ValueType.bomb) numberOfBombs++;\n\t\t\t\t\tif (_cells[i + 1].value === ValueType.bomb) numberOfBombs++;\n\t\t\t\t\tif (_cells[i - cols].value === ValueType.bomb) numberOfBombs++;\n\t\t\t\t\tif (_cells[i - cols - 1].value === ValueType.bomb) numberOfBombs++;\n\t\t\t\t\tif (_cells[i - cols + 1].value === ValueType.bomb) numberOfBombs++;\n\t\t\t\t} else if (i % cols === 0 && i !== 0 && i !== cellsNo - cols) {\n\t\t\t\t\t// first column w/o corners\n\t\t\t\t\tif (_cells[i + 1].value === ValueType.bomb) numberOfBombs++;\n\t\t\t\t\tif (_cells[i - cols].value === ValueType.bomb) numberOfBombs++;\n\t\t\t\t\tif (_cells[i + cols].value === ValueType.bomb) numberOfBombs++;\n\t\t\t\t\tif (_cells[i + cols + 1].value === ValueType.bomb) numberOfBombs++;\n\t\t\t\t\tif (_cells[i - cols + 1].value === ValueType.bomb) numberOfBombs++;\n\t\t\t\t} else if (i % cols === cols - 1 && i !== cols - 1 && i !== cellsNo - 1) {\n\t\t\t\t\t// last column w/o corners\n\t\t\t\t\tif (_cells[i - 1].value === ValueType.bomb) numberOfBombs++;\n\t\t\t\t\tif (_cells[i - cols].value === ValueType.bomb) numberOfBombs++;\n\t\t\t\t\tif (_cells[i + cols].value === ValueType.bomb) numberOfBombs++;\n\t\t\t\t\tif (_cells[i + cols - 1].value === ValueType.bomb) numberOfBombs++;\n\t\t\t\t\tif (_cells[i - cols - 1].value === ValueType.bomb) numberOfBombs++;\n\t\t\t\t} else if (i === 0) {\n\t\t\t\t\t// top left corner\n\t\t\t\t\tif (_cells[i + 1].value === ValueType.bomb) numberOfBombs++;\n\t\t\t\t\tif (_cells[i + cols].value === ValueType.bomb) numberOfBombs++;\n\t\t\t\t\tif (_cells[i + cols + 1].value === ValueType.bomb) numberOfBombs++;\n\t\t\t\t} else if (i === cols - 1) {\n\t\t\t\t\t// top right corner\n\t\t\t\t\tif (_cells[i - 1].value === ValueType.bomb) numberOfBombs++;\n\t\t\t\t\tif (_cells[i + cols].value === ValueType.bomb) numberOfBombs++;\n\t\t\t\t\tif (_cells[i + cols - 1].value === ValueType.bomb) numberOfBombs++;\n\t\t\t\t} else if (i === cellsNo - cols) {\n\t\t\t\t\t// bottom left corner\n\t\t\t\t\tif (_cells[i + 1].value === ValueType.bomb) numberOfBombs++;\n\t\t\t\t\tif (_cells[i - cols].value === ValueType.bomb) numberOfBombs++;\n\t\t\t\t\tif (_cells[i - cols + 1].value === ValueType.bomb) numberOfBombs++;\n\t\t\t\t} else if (i === cellsNo - 1) {\n\t\t\t\t\t// bottom right corner\n\t\t\t\t\tif (_cells[i - 1].value === ValueType.bomb) numberOfBombs++;\n\t\t\t\t\tif (_cells[i - cols].value === ValueType.bomb) numberOfBombs++;\n\t\t\t\t\tif (_cells[i - cols - 1].value === ValueType.bomb) numberOfBombs++;\n\t\t\t\t} else {\n\t\t\t\t\t// rest\n\t\t\t\t\tif (_cells[i - 1].value === ValueType.bomb) numberOfBombs++;\n\t\t\t\t\tif (_cells[i + 1].value === ValueType.bomb) numberOfBombs++;\n\t\t\t\t\tif (_cells[i - cols].value === ValueType.bomb) numberOfBombs++;\n\t\t\t\t\tif (_cells[i + cols].value === ValueType.bomb) numberOfBombs++;\n\t\t\t\t\tif (_cells[i - cols - 1].value === ValueType.bomb) numberOfBombs++;\n\t\t\t\t\tif (_cells[i - cols + 1].value === ValueType.bomb) numberOfBombs++;\n\t\t\t\t\tif (_cells[i + cols - 1].value === ValueType.bomb) numberOfBombs++;\n\t\t\t\t\tif (_cells[i + cols + 1].value === ValueType.bomb) numberOfBombs++;\n\t\t\t\t}\n\t\t\t\t_cells[i].value = numberOfBombs;\n\t\t\t}\n\t\t}\n\n\t\tsetCells(_cells);\n\n\t\tconsole.log(cells);\n\t}, [cols, rows]);\n\n\treturn { cells, setCells };\n}\n","/Users/magdalenamotyl/covidsweeper/covidsweeper/src/helpers/openCells.tsx",[],{"ruleId":"29","replacedBy":"30"},{"ruleId":"31","replacedBy":"32"},{"ruleId":"33","severity":1,"message":"34","line":1,"column":17,"nodeType":"35","messageId":"36","endLine":1,"endColumn":25},{"ruleId":"33","severity":1,"message":"37","line":1,"column":27,"nodeType":"35","messageId":"36","endLine":1,"endColumn":36},{"ruleId":"38","severity":1,"message":"39","line":122,"column":5,"nodeType":"40","endLine":122,"endColumn":17,"suggestions":"41"},"no-native-reassign",["42"],"no-negated-in-lhs",["43"],"@typescript-eslint/no-unused-vars","'useState' is defined but never used.","Identifier","unusedVar","'useEffect' is defined but never used.","react-hooks/exhaustive-deps","React Hook useEffect has missing dependencies: 'bombs', 'cells', and 'cellsNo'. Either include them or remove the dependency array.","ArrayExpression",["44"],"no-global-assign","no-unsafe-negation",{"desc":"45","fix":"46"},"Update the dependencies array to be: [bombs, cells, cellsNo, cols, rows]",{"range":"47","text":"48"},[4567,4579],"[bombs, cells, cellsNo, cols, rows]"]